//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"
#include <iostream>
#include "plugins/RANSktau.hpp"

#define MAX_SCRATCH_FIELDS 7

/* User Functions */

static dfloat rho, mueLam;
occa::kernel userfKernel;

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateSourceTerms();
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateProperties();
}

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  RANSktau::buildKernel(kernelInfo);
}

void UDF_Setup(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  udf.properties = &uservp;
  udf.sEqnSource = &userq;

  const int scalarFieldStart = 1;
  platform->options.getArgs("VISCOSITY", mueLam);
  platform->options.getArgs("DENSITY", rho);
  RANSktau::setup(nrs, mueLam, rho, scalarFieldStart);

// initial conditions
  int n_gll_points = mesh->Np * mesh->Nelements;

  for (int n = 0; n < n_gll_points; ++n)
  {

    nrs->U[n + 0 * nrs->fieldOffset] = 2.6726486e-01;    //x-velocity
    nrs->U[n + 1 * nrs->fieldOffset] = 0.0;    // y-velocity
    nrs->U[n + 2 * nrs->fieldOffset] = 0.0;    // z-velocity

    nrs->P[n] = 0.0; // pressure

    nrs->cds->S[n + 0 * nrs->cds->fieldOffset[0]] = 1.0; // temperature

    nrs->cds->S[n + 1 * nrs->cds->fieldOffset[0]] = 0.01; // k
    nrs->cds->S[n + 2 * nrs->cds->fieldOffset[0]] = 0.1; // tau

  }

  std::cout << "Calling UDF_Setup " << std::endl;
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{

}
