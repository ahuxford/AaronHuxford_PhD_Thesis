#include "experimental/rans_komg.f"
#define INTP_NMAX 1000 /* number of sample points */
#define LPART INTP_NMAX /* max number of particles per MPI rank */
c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows
c     - usrdat  : modify element vertices
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c
c-----------------------------------------------------------------------
      include "utilities.usr"
      include "limits.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_mut,rans_mutsk,rans_mutso
      real mu_t,Pr_t

      e = gllel(eg)

      Pr_t=0.91
      mu_t=rans_mut(ix,iy,iz,e)

      utrans = cpfld(ifield,2)
      if(ifield.eq.1) then
        udiff = cpfld(ifield,1)+mu_t
        t(ix,iy,iz,e,4)=mu_t/cpfld(ifield,1)
      elseif(ifield.eq.2) then
        udiff = cpfld(ifield,1)+mu_t*cpfld(ifield,2)/(Pr_t*cpfld(1,2))
      elseif(ifield.eq.3) then
        udiff = cpfld(ifield,1)+rans_mutsk(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        udiff = cpfld(ifield,1)+rans_mutso(ix,iy,iz,e)
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      integer ix,iy,iz,e,eg

c     e = gllel(eg)

      ffx = 0.0
      ffy = 0.0
      ffz = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
c      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix,iy,iz,e,eg
      real rans_kSrc,rans_omgSrc
      real rans_kDiag,rans_omgDiag

      e = gllel(eg)

      if(ifield.eq.3) then
        qvol = rans_kSrc(ix,iy,iz,e)
        avol = rans_kDiag(ix,iy,iz,e)
      elseif(ifield.eq.4) then
        qvol = rans_omgSrc(ix,iy,iz,e)
        avol = rans_omgDiag(ix,iy,iz,e)
      else
        qvol = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      character*3 cb3
      integer ix,iy,iz,iside,e,eg
      real blunt_vel,tke,tau

      e=gllel(eg)
    
C     U, TKE, and Omg are all zero on the wall 
      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ix,iy,iz,e,eg
      real blunt_vel,tke,tau

      e = gllel(eg)

      ux   = 0.424
      uy   = 0.0
      uz   = 0.0
      temp = 0.0

      call turb_in(wd(ix,iy,iz,e),tke,tau)
      if(ifield.eq.3) temp = tke
      if(ifield.eq.4) temp = tau

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
c      implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer n,e,f,ninp
      real ypmin,ypmax,ypave,utmin,utmax,utave,mumax,mumin,muave
      real pbarin,pbarout,parea,pint,aint,glsum

      real uvw1,xyz1
      common /scratch_interp/
     & uvw1(2,1000),xyz1(2,1000)

      integer ifpost,i
      real pta(3),ptb(3)

      n=lx1*ly1*lz1*nelv

      if (istep.eq.1) then
        call outpost2(vx,vy,vz,pr,t,ldimt,'   ')
      endif

      call print_limits
      call y_p_limits(wd,.true.)
      call get_limits_nodt(t(1,1,1,1,4),mumin,mumax,muave,n)

c      pull line plots from results fld file
      ifpost=0
      if (ifpost.eq.1) then

      call blank(initc(1),80)
      write(initc(1),4)
 4    format('pipe0.f00018')

      call setics
      delta_x = 0.0
      do i=1,6
        pta(1) = delta_x
        pta(2) = -0.05
        pta(3) = 0.0
        ptb(1) = delta_x
        ptb(2) = 0.0
        ptb(3) = 0.0
        npts = 5000
        call lineplot(pta,ptb,npts)
        delta_x = delta_x + 0.2
      enddo

      write(*,*)'   done writing lineplot values '

      call exitt()
      endif

      return
      end

c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      implicit none
      include 'SIZE'
      include 'TOTAL'

C     enforce constant average velocity
       param(54) = -1
       param(55) = 0.424

C     suppress runtime stats
      param(120)= 9999999

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
c      implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer i,n,iel,ifc,id_face
      real xmin,xmax,ymin,ymax,scaley,scalex
      real glmin,glmax

      n=nx1*ny1*nz1*nelv

C     set non-periodic BC, wall
      do iel=1,nelv
      do isd=1,2*ndim
        id_line = bc(5,isd,iel,1)
        if (id_line.eq.3) then
           cbc(isd,iel,1) = 'W  '
           cbc(isd,iel,2) = 'I  '
           cbc(isd,iel,3) = 't  '
           cbc(isd,iel,4) = 't  '
        endif
      enddo
      enddo

      call gen_rea(2)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      implicit none
      include 'SIZE'
      include 'TOTAL'

      real wd
      common /walldist/ wd(lx1,ly1,lz1,lelv)

      integer ifld_k,ifld_tau,m_id,w_id
      real coeffs(30) !array for passing your own coeffs
      logical ifcoeffs, ifransD

      ifld_k = 3 !address of tke equation in t array
      ifld_tau = 4 !address of omega equation in t array
      ifcoeffs=.false. !set to true to pass your own coeffs
      ifransD = .true. ! Split diag of production term into implicit

c     Supported models:
c      m_id = 0 !regularized standard k-omega
c     m_id = 1 !regularized low-Re k-omega
c     m_id = 2 !regularized standard k-omega SST
c     m_id = 3 !regularized low-Re k-omega SST
      m_id = 4 !standard k-tau
c      m_id = 5 !low Re k-tau

C     Wall distance function: (not strictly needed for k-tau, but nice to have)
c       w_id = 0 ! user specified
c      w_id = 1 ! cheap_dist (path to wall, may work better for periodic boundaries)
      w_id = 2 ! distf (coordinate difference, provides smoother function)

      call rans_init(ifld_k,ifld_tau,ifcoeffs,coeffs,w_id,wd,m_id)
c      call blunt_vel_setup(wd)

      return
      end
c-----------------------------------------------------------------------
      subroutine interp_v(uvw,xyz,n)
c
c     evaluate velocity for list of points xyz
c
      include 'SIZE'
      include 'TOTAL'

      real uvw(ldim,n),xyz(ldim,n)

      real    rwk(INTP_NMAX,ldim+1) ! r, s, t, dist2
      integer iwk(INTP_NMAX,3)      ! code, proc, el
      save    rwk, iwk

      integer intp_h
      save    intp_h

      common /rwk_intp/
     $       fwrk(lx1*ly1*lz1*lelt,ldim),
     $       fpts(ldim*INTP_NMAX),
     $       pts(ldim*INTP_NMAX)

      integer icalld,e
      save    icalld
      data    icalld /0/

      nxyz  = nx1*ny1*nz1
      ntot  = nxyz*nelt

      if (n.gt.INTP_NMAX) call exitti ('n > INTP_NMAX in interp_v!$',n)

      if (nelgt.ne.nelgv) call exitti
     $   ('nelgt.ne.nelgv not yet supported in interp_v!$',nelgv)

      do i=1,n				! ? not moving -> save?
         pts(i)     = xyz(1,i)
         pts(i + n) = xyz(2,i)
         if (if3d) pts(i + n*2) = xyz(3,i)
      enddo

      if (icalld.eq.0) then
        icalld = 1
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      ! pack working array
      call opcopy(fwrk(1,1),fwrk(1,2),fwrk(1,3),vx,vy,vz)

      ! interpolate
      call interp_nfld(fpts,fwrk,ndim,pts(1),pts(1+n),pts(2*n+1),
     $                 n,iwk,rwk,INTP_NMAX,.true.,intp_h)

      do i=1,n
         uvw(1,i) = fpts(i)
         uvw(2,i) = fpts(i + n)
         if(if3d) uvw(3,i) = fpts(i + n*2)
      enddo

      return
      end
C-----------------------------------------------------------------------
      subroutine turb_in(wd,tke,tau)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer ix,iy,iz,e
      real wd,tke,tau

      real Re,darcy,utau,sigk,kmax,yplus,yk

      Re = 1.0/param(2)
      darcy = 0.316/(Re**0.25)
      utau = sqrt(darcy/8.0)
      sigk = 0.6
      kmax = 2.5*utau*utau
      yplus = max(wd*utau*Re,1.0e-6)
      yk=30.0

      tke=kmax*exp(-(log10(yplus/yk))**2.0/(2.0*sigk**2))
      tau=yplus/(10.0*utau*utau*Re)

      return
      end
C-----------------------------------------------------------------------
      subroutine lineplot(pt1,pt2,lpts)
      implicit none
      include 'SIZE'
      include 'TOTAL'

      integer npts,lpts,iplot
      real pt1(3),pt2(3)

      character*32 fname
      character*14 afmt
      character*10 rfmt

      integer intp_h,i,j,nt,nfld
      save intp_h
      logical ifset,ifdo
      real dx,pts(lhis,ldim)
      real fwrk(lx1*ly1*lz1*lelt,ldim+1+ldimt)
      real fpts(lhis*(ldim+1+ldimt))
      real uout(lhis),vout(lhis),wout(lhis)
      real prout(lhis),tout(lhis,ldimt)
      character*4 outname(ldim+1+ldimt)

      real rwrk(lhis,ldim+1)
      integer iwrk(lhis,3)
      save rwrk,iwrk

      save ifdo,ifset
      data ifdo /.true./
      data ifset /.true./

      save iplot
      data iplot /1/

      if(.not.ifdo) return

      nt=lx1*ly1*lz1*nelt

      npts=max(lpts,2)
      if(npts.gt.lhis) then
        if(nio.eq.0) write(*,*)
     &        "Error in lineplot, recompile with lhis in SIZE >= ",npts
        ifdo=.false.
        return
      endif

      call rzero(pts,npts*ndim)

      do j=1,ndim
        pts(1,j)=pt1(j)
        dx=(pt2(j)-pt1(j))/(real(npts-1))
        do i=2,npts
          pts(i,j)=pts(i-1,j)+dx
        enddo
      enddo

      if(ifset)then
        ifset=.false.
        call interp_setup(intp_h,0.0,0,nelt)
      endif

      nfld=0
      if(ifvo) then
        write(outname(1),'(a4)')"VELX"
        write(outname(2),'(a4)')"VELY"
        call copy(fwrk(1,1),vx,nt)
        call copy(fwrk(1,2),vy,nt)
        nfld=2
      endif
      if(if3d.and.ifvo)then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"VELZ"
        call copy(fwrk(1,nfld),vz,nt)
      endif

      if(ifpo) then
        nfld=nfld+1
        write(outname(nfld),'(a4)')"PRES"
        call copy(fwrk(1,nfld),pr,nt)
      endif

      if(ifheat) then
        if(ifto) then
          nfld=nfld+1
          write(outname(nfld),'(a4)')"TEMP"
          call copy(fwrk(1,nfld),t,nt)
        endif

        do i=1,ldimt-1
          if(ifpsco(i)) then
            nfld=nfld+1
            write(outname(nfld),'(a2,i2)')"PS",i
            call copy(fwrk(1,nfld),t(1,1,1,1,i+1),nt)
          endif
        enddo
      endif

      if(nfld.gt.0) then
        call blank(fname,32)
        if(iplot.lt.10) then
          write(fname,'(a,i1,a)') "plot",iplot,".dat"
        elseif(iplot.lt.100) then
          write(fname,'(a,i2,a)') "plot",iplot,".dat"
        else
          write(fname,'(a,i3,a)') "plot",iplot,".dat"
        endif

        if(nio.eq.0) then
          write(*,*)'   Writing line plot data to file ',fname
          if(if3d)then
            write(*,'(7x,3es15.6)')pt1(1),pt1(2),pt1(3)
            write(*,'(7x,3es15.6)')pt2(1),pt2(2),pt2(3)
          else
            write(*,'(7x,2es15.6)')pt1(1),pt1(2)
            write(*,'(7x,2es15.6)')pt2(1),pt2(2)
          endif
          write(*,*)
        endif

        call interp_nfld(fpts,fwrk,nfld,pts(1,1),pts(1,2),pts(1,3),npts
     &                                  ,iwrk,rwrk,lhis,.true.,intp_h)

        call blank(afmt,14)
        call blank(rfmt,10)
        if(if3d) then
          write(afmt,'(a1,i2,a11)')"(",nfld+3,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+3,"es16.8)"
        else
          write(afmt,'(a1,i2,a11)')"(",nfld+2,"a16,es16.8)"
          write(rfmt,'(a1,i2,a7)')"(",nfld+2,"es16.8)"
        endif

        if(nio.eq.0) then
          open(unit=10,file=fname,status='unknown',form='formatted')
          if(if3d) then
            write(10,afmt)"X","Y","Z",(outname(i),i=1,nfld),time
          else
            write(10,afmt)"X","Y",(outname(i),i=1,nfld),time
          endif

          do i=1,npts
            if(if3d) then
              write(10,rfmt)pts(i,1),pts(i,2),pts(i,3)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            else
              write(10,rfmt)pts(i,1),pts(i,2)
     &                               ,(fpts(i+j),j=0,(npts*nfld-1),npts)
            endif
          enddo
        endif
        close(10)
        iplot=iplot+1
      endif


      return
      end
c-----------------------------------------------------------------------
